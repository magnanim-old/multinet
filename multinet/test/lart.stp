global tmp_ts /* construct to hold temporary timestamps */
global start

probe begin
{
  start = gettimeofday_ms();
}

function timestamp:long(ts) {
  return gettimeofday_ms() - ts
}

probe process("libmultinet.so").function("mlnet::cutils::ml_network2adj_matrix")
{
  tmp_ts["ml_network2adj_matrix", "start"] = gettimeofday_ms();
}

probe process("libmultinet.so").mark("ml2am__end")
{
  printf("Finished reading network to matrix in %s. Layers: %d Dims: %d x %d\n",
    msecs_to_string(timestamp(tmp_ts["ml_network2adj_matrix", "start"])), $arg1, $arg2, $arg2);
}

probe process("libmultinet.so").function("mlnet::cutils::supraA")
{
  tmp_ts["supraA", "start"] = gettimeofday_ms();
}

probe process("libmultinet.so").function("mlnet::cutils::supraA").return
{
  printf("Finished with supraA: %s\n", msecs_to_string(timestamp(tmp_ts["supraA", "start"])));
}

probe process("libmultinet.so").mark("walk__start")
{
  tmp_ts["mp", "start"] = gettimeofday_ms();
}

probe process("libmultinet.so").mark("walk__end")
{
  printf("Finished with walking: %s\n", msecs_to_string(timestamp(tmp_ts["mp", "start"])));
}

probe process("libmultinet.so").function("mlnet::lart::Dmat")
{
  tmp_ts["dmat", "start"] = gettimeofday_ms();
}

probe process("libmultinet.so").function("mlnet::lart::Dmat").return
{
  printf("Finished with Dmat: %s\n", msecs_to_string(timestamp(tmp_ts["dmat", "start"])));
}

probe process("libmultinet.so").mark("cluster__start")
{
  tmp_ts["cluster", "start"] = gettimeofday_ms();
}

probe process("libmultinet.so").mark("cluster__end")
{
  printf("Finished clustering in %s with %d clusters \n", msecs_to_string(timestamp(tmp_ts["cluster", "start"])), $arg1);
}


probe end
{
  printf("Finished run in %s \n", msecs_to_string(timestamp(start)));
}
