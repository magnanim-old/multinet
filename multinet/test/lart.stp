global tmp_ts /* construct to hold temporary timestamps */
global start


probe begin
{
  start = gettimeofday_ms();
}

function timestamp:long(ts) {
  return gettimeofday_ms() - ts
}

probe process("libmultinet.so").function("mlnet::lart::ml_network2adj_matrix")
{
  tmp_ts["ml_network2adj_matrix", "start"] = gettimeofday_ms();
}

probe process("libmultinet.so").mark("ml2am__end")
{
  printf("Finished reading network to matrix in %s. Layers: %d Dims: %d x %d\n",
    msecs_to_string(timestamp(tmp_ts["ml_network2adj_matrix", "start"])), $arg1, $arg2, $arg2);
}

probe process("libmultinet.so").function("mlnet::lart::supraA")
{
  tmp_ts["supraA", "start"] = gettimeofday_ms();
}

probe process("libmultinet.so").function("mlnet::lart::supraA").return
{
  printf("Finished with supraA: %s\n", msecs_to_string(timestamp(tmp_ts["supraA", "start"])));
}

probe process("libmultinet.so").function("mlnet::lart::matrix_power")
{
  tmp_ts["mp", "start"] = gettimeofday_ms();
}

probe process("libmultinet.so").function("mlnet::lart::matrix_power").return
{
  printf("Finished with matrix_power: %s\n", msecs_to_string(timestamp(tmp_ts["mp", "start"])));
}

probe process("libmultinet.so").function("mlnet::lart::Dmat")
{
  tmp_ts["dmat", "start"] = gettimeofday_ms();
}

probe process("libmultinet.so").function("mlnet::lart::Dmat").return
{
  printf("Finished with Dmat: %s\n", msecs_to_string(timestamp(tmp_ts["dmat", "start"])));
}

probe process("libmultinet.so").function("mlnet::lart::modMLPX")
{
  tmp_ts["modmlpx", "start"] = gettimeofday_ms();
}

probe process("libmultinet.so").function("mlnet::lart::modMLPX").return
{
  printf("Finished with modmlpx: %s\n", msecs_to_string(timestamp(tmp_ts["modmlpx", "start"])));
}

probe process("libmultinet.so").function("mlnet::lart::get_partition")
{
  tmp_ts["part", "start"] = gettimeofday_ms();
}

probe process("libmultinet.so").function("mlnet::lart::get_partition").return
{
  printf("Finished with partitioning: %s\n", msecs_to_string(timestamp(tmp_ts["part", "start"])));
}

probe process("libmultinet.so").function("mlnet::lart::average_linkage")
{
  tmp_ts["link", "start"] = gettimeofday_ms();
}

probe process("libmultinet.so").function("mlnet::lart::average_linkage").return
{
  tmp_ts["link", "end"] += gettimeofday_ms() - tmp_ts["link", "start"];
}

probe process("libmultinet.so").function("mlnet::lart::find_dist")
{
  tmp_ts["dist", "start"] = gettimeofday_ms();
}

probe process("libmultinet.so").function("mlnet::lart::find_dist").return
{
  tmp_ts["dist", "end"] += gettimeofday_ms() - tmp_ts["dist", "start"];
}

probe process("libmultinet.so").mark("agglo__prune__start")
{
  tmp_ts["prune", "start"] = gettimeofday_ms();
}

probe process("libmultinet.so").mark("agglo__prune__end")
{
  tmp_ts["prune", "end"] += gettimeofday_ms() - tmp_ts["prune", "start"];
}

probe process("libmultinet.so").function("mlnet::lart::AgglomerativeClustering")
{
  printf("Finished building Distance matrix in: %s\n", msecs_to_string(timestamp(tmp_ts["dmat", "start"])));
  tmp_ts["clustering", "start"] = gettimeofday_ms();
}

probe process("libmultinet.so").mark("agglo__end")
{
  printf("Finished clustering in %s with %d clusters \n", msecs_to_string(timestamp(tmp_ts["clustering", "start"])), $arg1);
  printf("Linkage took: %s\n", msecs_to_string(tmp_ts["link", "end"]));
  printf("find_dist took: %s\n", msecs_to_string(tmp_ts["dist", "end"]));
  printf("prune took: %s\n", msecs_to_string(tmp_ts["prune", "end"]));
}

/*probe process("libmultinet.so").function("mlnet::lart::find_dist")
{
  tmp_ts["linkage"] = gettimeofday_ms();
}

probe process("libmultinet.so").function("mlnet::lart::find_dist").return
{
  printf("Found distance in %s\n", msecs_to_string(timestamp(tmp_ts["linkage"])));
}*/


probe end
{
  printf("Finished run in %s \n", msecs_to_string(timestamp(start)));
}
